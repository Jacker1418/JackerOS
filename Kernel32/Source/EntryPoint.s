[ORG 0x00]
[BITS 16]

SECTION .text

START:
	MOV AX, 0X1000
	MOV DS, AX
	MOV ES, AX

	MOV AX, 0x2401
	INT 0x15

	JC .A20_GATE_ERROR
	JMP .A20_GATE_SUCCESS

	.A20_GATE_ERROR:
	IN AL, 0x92

	OR AL, 0X02
	AND AL, 0xFE

	OUT 0x92, AL

	.A20_GATE_SUCCESS:
	CLI
	LGDT [ GDTR ]

	MOV EAX, 0X4000003B
	MOV CR0, EAX

	JMP DWORD 0X08:(PROTECTED_MODE - $$ + 0X10000)

[BITS 32]
PROTECTED_MODE:
	MOV AX, 0X10
	MOV DS, AX
	MOV ES, AX
	MOV FS, AX
	MOV GS, AX

	MOV SS, AX
	MOV ESP, 0XFFFE
	MOV EBP, 0XFFFE

	PUSH ( SWITCH_SUCCESS_MESSAGE - $$ + 0X10000)
	PUSH 2
	PUSH 0
	CALL PRINT_MESSAGE
	ADD ESP, 12

	JMP DWORD 0x08:0x10200

PRINT_MESSAGE:
	PUSH EBP
	MOV EBP, ESP
	PUSH ESI
	PUSH EDI
	PUSH EAX
	PUSH ECX
	PUSH EDX

	MOV EAX, DWORD [ EBP + 12 ]
	MOV ESI, 160
	MUL ESI
	MOV EDI, EAX

	MOV EAX, DWORD [ EBP + 8 ]
	MOV ESI, 2
	MUL ESI
	ADD EDI, EAX

	MOV ESI, DWORD [ EBP + 16 ]

.MESSAGE_LOOP:
	MOV CL, BYTE [ ESI ]
	CMP CL, 0
	JE .MESSAGE_END

	MOV BYTE [ EDI + 0XB8000 ], CL

	ADD ESI, 1
	ADD EDI, 2

	JMP .MESSAGE_LOOP

.MESSAGE_END:
	POP EDX
	POP ECX
	POP EAX
	POP EDI
	POP ESI
	POP EBP
	RET

ALIGN 8, DB 0

DW 0X0000

GDTR:
	DW GDT_END - GDT - 1
	DD (GDT - $$ + 0X10000)

GDT:

	NULL_DESCRIPTOR:
		DW 0X0000
		DW 0X0000
		DB 0X00
		DB 0X00
		DB 0X00
		DB 0X00

	CODE_DESCRIPTOR:
		DW 0XFFFF  
		DW 0X0000
		DB 0X00
		DB 0X9A
		DB 0XCF
		DB 0X00

	DATA_DESCRIPTOR:
		DW 0XFFFF
		DW 0X0000
		DB 0X00
		DB 0X92
		DB 0XCF
		DB 0X00
GDT_END:

SWITCH_SUCCESS_MESSAGE: DB 'Switch to Protected Mode Success!', 0

TIMES 512 - ( $ - $$ ) DB 0X00


